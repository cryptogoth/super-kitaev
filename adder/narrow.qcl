operator Toffoli(qureg q, qureg c1, qureg c2) {
	Matrix8x8((1,0),(0,0),(0,0),(0,0), (0,0),(0,0),(0,0),(0,0),
	          (0,0),(1,0),(0,0),(0,0), (0,0),(0,0),(0,0),(0,0),
	          (0,0),(0,0),(1,0),(0,0), (0,0),(0,0),(0,0),(0,0),
	          (0,0),(0,0),(0,0),(1,0), (0,0),(0,0),(0,0),(0,0),
	          (0,0),(0,0),(0,0),(0,0), (1,0),(0,0),(0,0),(0,0),
	          (0,0),(0,0),(0,0),(0,0), (0,0),(1,0),(0,0),(0,0),
	          (0,0),(0,0),(0,0),(0,0), (0,0),(0,0),(0,0),(1,0),
	          (0,0),(0,0),(0,0),(0,0), (0,0),(0,0),(1,0),(0,0),
	          q & c1 & c2);
}

// Now we narrow the tables by a, see circuit on Notes p. 21

operator cnarrowhelper(qureg addend, qureg ancilla) {
	CNot(ancilla[1],addend);
	CNot(ancilla[2],addend);
	CNot(ancilla[3],addend);
	// Flip addend so we can take negative-controlled-NOT
	Not(addend);
	CNot(ancilla[3],addend);
}

operator snarrowhelper(qureg addend, qureg ancilla) {
	// First toggle the one's of the sum output
	CNot(ancilla[0], addend);
	CNot(ancilla[3], addend);
	// Next toggle the zero's of the sum output
	Not(addend);
	CNot(ancilla[1], addend);
	CNot(ancilla[2], addend);
}

operator snarrow(qureg s, qureg a, qureg b, qureg scratch) {

	snarrowhelper(a, scratch);

	//qprint(scratch, 5);
	
	Not(b);
	Toffoli(s[0], b, scratch[0]);
	Toffoli(s[1], b, scratch[1]);
	Not(b);
	Toffoli(s[0], b, scratch[2]);
	Toffoli(s[1], b, scratch[3]);

	//qprint(s, 6);
	
	!snarrowhelper(a, scratch);
}

operator cnarrow(qureg c, qureg a, qureg b, qureg scratch) {
	
	// a narrowed into scratch
	cnarrowhelper(a, scratch);
	
	//qprint(scratch,3);
	
	// Now we narrow by b0 into c0
	// Flip b[0] so we can take negative-CCNOT
	Not(b[0]);
	Toffoli(c[0], scratch[0], b);
	Toffoli(c[1], scratch[1], b);
	// Flip b[0] back so we can take normal CCNOT
	Not(b[0]);
	Toffoli(c[0], scratch[2], b);
	Toffoli(c[1], scratch[3], b);
	
	//qprint(c,4);
	
	// Now we un-narrow a and b to free up scratch space
	!cnarrowhelper(a, scratch);
	
	//qprint(scratch,0);
	
}

operator addernarrow(qureg sarray, qureg carray, qureg aarray, qureg barray,
	qureg scratch) {
	int n = #aarray;
	int i;
	int j;
	for i=0 to n-1 {
		j = i*2;
		cnarrow(carray[j..j+1], aarray[i], barray[i], scratch);
		snarrow(sarray[j..j+1], aarray[i], barray[i], scratch);
	}
}

include "adder/apply.qcl";

// This performs addition at one bit position given a carry in, and
// computes a carry out
procedure halfadder(qureg sumtable, qureg carrytable, qureg carryin,
	qureg carryout, qureg sumout) {
	
	// Compute the sum given the carryin
	applyfunction(sumtable, carryin, sumout);
	// Compute the carry out given the carry in
	applyfunction(carrytable, carryin, carryout);
}

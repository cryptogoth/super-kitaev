// Test subtraction

include "utils/qprint.qcl";
include "utils/toffoli.qcl";
include "adder/narrow.qcl";
include "adder/compose.qcl";
include "adder/parallel-iterate.qcl";
include "adder/parallel-add.qcl";

qureg a[4];
qureg b[4];
qureg scratch[4];
// Registers for narrowed carry tables
qureg ctables[2*7];
qureg stables[2*4];

qureg carry[5];
qureg sum[4];
//qureg total = sum & carry[4]; // QCL's bit order is retarded

// Fill the values of a and b, 0-based indexing
// a = 0b 1011 = 0d 11
Not(a[3]);
Not(a[1]);
Not(a[0]);

Not(a);
qprints(a, "a= ");

// Leave a flipped, b/c that's the way to subtract it according to DKRS

// A new test
// b = 0b 0101 = 0d 5
Not(b[0]);
Not(b[2]);
qprints(b, "b= ");

// For 4-bit numbers, l=2
parallelAdd(stables, ctables, a, b, 2, scratch, carry, sum);

// Flip the sum, according to DKRS
Not(sum);

qprints(stables, "stables= ");
// Expected output: |0>
qprints(ctables, "ctables= ");
// Expected output: |0>
qprints(sum, "sum= ");
// Expected output: |6>
qprints(scratch, "scratch= ");
// Expected output: |0>

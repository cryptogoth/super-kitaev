// Top-level methods of Kitaev parallel adding

// a and b are n-bit numbers to add
// l is the log2(n)
// stables is a 2n-qubit register to hold narrowed sum function tables
// ctables is a 2*(2^(l+1))-qubit register to hold narrowed carry function tables
// scratch is a 4-qubit register used for narrowing 2-bit input function tables
// carry is an n+1-qubit register to hold carry bits
//   carry[n] will hold the high carry bit, which is MSB of the sum
// sum is an n-qubit register to hold sum bits
cond operator parallelAdd(qureg stables, qureg ctables, qureg a, qureg b, int l,
	qureg scratch, qureg carry, qureg sum) {
	int i; // index to loop over bit positions
	int n = 2^l; // number of bits to add
	int j; // 2*i for indexing stables
	
	print "narrowing tables";
	// Narrow adder tables
	addernarrow(stables, ctables, a, b, scratch);
	
	print "composing tables";
	// Compose ctables in l levels
	composeTables(ctables, l);

	print "iterating in parallel";
	// Compute the carry bits in parallel
	parallelIterate(ctables, carry, l);
	
	print "summing";
	// Compute the sums using the sum tables and carry bits
	for i=0 to n-1 {
		j = 2*i;
		applyfunction(stables[j..j+1], carry[i], sum[i]);
	}

	print "uniterating in parallel";
	// Uncompute the carry bits in parallel, except for last one
	parallelUnIterate(ctables, carry, l);
	
	print "uncomposing tables";
	// Uncompose tables to free up ancillae
	unComposeTables(ctables, l);
	
	print "unnarrowing tables";
	// Unnarrow tables to free up ancillae
	addernarrow(stables, ctables, a, b, scratch);
}
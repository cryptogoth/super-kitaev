// Test subtraction for Kitaev encoded numbers

include "utils/qprint.qcl";
include "utils/toffoli.qcl";
include "adder/encoded.qcl";
include "adder/narrow.qcl";
include "adder/compose.qcl";
include "adder/parallel-iterate.qcl";
include "adder/parallel-add.qcl";

// Qubits for encoded adder
qureg zero[1]; // dedicated zero register
qureg a[2];
qureg b[2];
qureg one[2]; // dedicated one register

 // we only need 1 scratch qubit for the encoded adder, but 4 for parallel adder
qureg scratch[4];
qureg u[3];
qureg v[2];

// Qubits for parallel adder
// Registers for narrowed carry tables
qureg ctables[2*3];
qureg stables[2*2];

qureg carry[3];
qureg sum[2];
qureg total = sum & carry[2];

dump;

// Flip the LSB of the one register
print "one= ",one;
Not(one[0]); // there, now it's one
dump;


// Fill the values of a and b, 0-based indexing
// a = 0b 11 = 0d 3
Not(a[1]);
Not(a[0]);

print "a= ", a;
dump;
//qprints(a, "a= ");

// Mix b
Mix(b);
dump;

// Flip b, and then we'll add one to it below to make it -b
Not(b);
print "b= ", b;
dump;
//qprints(b, "b= ");

// Reduce this encoded add of 3 numbers to 2 numbers
// In particular this is useful b/c one of the 3 numbers will be a one
// to complete the two's complement of b
// Add one to the complement of a to get its negative
encodedadd(a, b, one, scratch[0], u[1..2], v);
print "u= ",u;
print "v= ",v;
dump;
//qprints(u, "u=");
//qprints(v, "v=");
// Expected output:
// a=  | 3 > 
// b=  | 2 > 
// u= | 6 > 
// v= | 0 >

// Now use parallel add to make it one number
// For 2-bit numbers, l=1
parallelAdd(stables, ctables, u[0..1], v, 1, scratch, carry, sum);

qprints(stables, "stables= ");
// Expected output: |0>
qprints(ctables, "ctables= ");
// Expected output: |0>
print "sum=",sum;
dump;
//qprints(sum, "sum= ");
// Expected output: |2>
qprints(scratch, "scratch= ");
// Expected output: |0>
